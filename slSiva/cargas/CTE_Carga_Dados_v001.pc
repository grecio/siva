
/****************************************************************************/
/* Objetivo    : Carregar Dados do CTE                                      */
/* Modulo      : CTe                                                        */
/****************************************************************************/

/***************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h> 
#include <dirent.h>
#include <limits.h>
#include <fcntl.h>
#include <errno.h>
#include <math.h>

/***************************************************/
#include "sqlca.h"
#include "oraca.h"

EXEC ORACLE OPTION (ORACA=YES);
EXEC ORACLE OPTION (PREFETCH=60000);
/***************************************************/
#define MAXFILENAMESIZE 255
#define MAXPROGNAMESIZE 50

/***************************************************/
#define DATE_TIME_MASK 	"%Y/%m/%d %H:%M:%S"
#define DATE_MASK      	"%Y/%m/%d"
#define TIME_MASK      	"%H:%M:%S"
#define DATE_STR_MASK   "%Y%m"

#define ErroSQL sqlca.sqlcode
#define NRowsFetched sqlca.sqlerrd[2]
#define NoDataFound 1403 

char *t_mask_ptr = TIME_MASK;
char *dt_mask_ptr = DATE_TIME_MASK;
char *dt_str_mask_ptr = DATE_STR_MASK;
/*
#define DT_MASK       givemetime(dt_mask_ptr)
#define D_MASK        givemetime(d_mask_ptr)
#define T_MASK        givemetime(t_mask_ptr)
#define DT_STR_MASK   givemetime(dt_str_mask_ptr)
*/
/***************************************************/
extern int errno;
char * uppern(char *, int);
char * givemetime(char *);
char log_file [MAXFILENAMESIZE];
char prog_name[MAXPROGNAMESIZE];
int  formato              = 0;
char sql                  [255];
char Status               [05];
char Word                 [4096];
char cNomArquivo[254+1];
signed int proc_num_pid   = 0;
char cStatus              [04];
int  nPesquisaArquivo     = 0;
char vNomeArquivo         [255];
char DataHora             [18];
char cmdsolaris           [255];
int  resCmd               = 0;
char S                    [4096];
char V                    [4096];
char Line [4096];
char Separator[1]      = ";";
int  Ord = 0;
char Field[4096];
int  FieldSize = 0;
int  Pos = 0;
int  ctl = 0;
int  nSeqCTeArquivo;
char cPassword            [50];

/***************************************************/
void ProcessarInformCteIdentificacao (char *buf_aux);
char *CurrentDateTime (char *DataHora, int formato);
void GravarIdentArquivo();
int StatusProcUnixPid(int N);
int CmdUnix (char *tipoParm, int numPid);
void Move_Files_Erro();
void Move_Files();
void Close_Input_Output_Files();
char *SubString (const char *S, char *Old, char *New,char *Word);
char *mExtractFieldFloat (const char *Line, char *Separator, int Ord, char *Field, int FieldSize);
char *mExtractField (const char *Line, char *Separator, int Ord, char *Field, int FieldSize);
char *mNextWord (const char *S,int Pos,char *Word, int Tamanho);
void Get_Password();
/***************************************************/
char prog_name			[MAXPROGNAMESIZE];

struct dirent *p = NULL;
          
char input_file_name            [MAXFILENAMESIZE];  
char proc_input_file_name       [MAXFILENAMESIZE];  
char erro_input_file_name       [MAXFILENAMESIZE];  
char controle_file_name         [MAXFILENAMESIZE];
char log_file                   [MAXFILENAMESIZE];
char prog_name                  [MAXPROGNAMESIZE];
char file_email                 [MAXPROGNAMESIZE];

#define ERRO                  	-1
/***************************************************/
FILE *fp_input       = NULL;
FILE *fp_output      = NULL;
FILE *fp_controle          = NULL;
FILE *fp_problemas_email   = NULL;
FILE *fp_ocorrencias_email = NULL;
   
/***************************************************/
/* Informacoes sobre o arquivo de log              */
/***************************************************/
#define FILE_LOG   0
#define STDOUT_LOG 1
int log_mode = STDOUT_LOG | FILE_LOG;   

/************************************************************/
/* Variaveis globais                                        */
/************************************************************/

char *InstanciaBD;
char *usuario;
char *password;

/***************************************************/
/***************************************************/
int main(int argc, char *argv[])
{

#if VERSAO_PRODUCAO
    char *log_dir       = "/sistemas/INCORPORACAO/CTE/LOG";
    char *in_file_dir   = "/sistemas/INCORPORACAO/CTE/PENDENTE"; 
    char *base_file_dir = "/sistemas/INCORPORACAO/CTE/";
    
    InstanciaBD = "genipabu";
    usuario 	= "CARGA_CTE";
    password    = "carga"; 
 	
#endif

#if VERSAO_TESTE
    char *log_dir       = "/sistemas/INCORPORACAO/CTE/LOG";
    char *in_file_dir   = "/sistemas/INCORPORACAO/CTE/PENDENTE"; 
    char *base_file_dir = "/sistemas/INCORPORACAO/CTE/";
    
    InstanciaBD  = "genipabu";
    usuario      = "CARGA_CTE";
    password     = "carga";
#endif

  time_t t_i = 0, t_f = 0, t_c = 0;
  DIR *dp;
  
  int i = 0;

  /* Abre arquivo de log e grava nele algumas linhas */
  Open_Log(argv[0], log_dir);   
  
  if((dp = opendir(in_file_dir)) == NULL)
    {
      fprintf(stderr,"Falha na abertura do diretorio %s.\nErrno %d \n", 
                      in_file_dir, errno);
      exit(1);
    }
  
  /* Efetuando conexao com o banco */
  printf("==============================================================================================================================================\n");
  
  Get_Password();
  
  fprintf(fp_output,"%s - Efetuando conexao com o BD user: %s --> instancia: %s\n",CurrentDateTime(DataHora,1),usuario,InstanciaBD);
  printf("%s - Efetuando conexao com o BD user: %s --> instancia: %s\n",CurrentDateTime(DataHora,1),usuario,InstanciaBD);

  if(ConectaBD(usuario, cPassword, InstanciaBD) != 0)
    {   
    fprintf(fp_output,"%s - Erro ao tentar conexao com o banco de dados - sqlcode = %d.\n",CurrentDateTime(DataHora,1),
                          sqlca.sqlcode);
    printf("%s - Erro ao tentar conexao com o banco de dados - sqlcode = %d.\n",CurrentDateTime(DataHora,1),
                          sqlca.sqlcode);						  
      exit(1);
    }
  
  fprintf(fp_output,"Conectado ao BD com sucesso.\n");

  sprintf(sql, "ALTER SESSION SET NLS_DATE_FORMAT='YYYYMMDDHH24MISS'");
  
  EXEC SQL EXECUTE IMMEDIATE :sql;	 

  EXEC SQL   
		select NU_PID,ST_PROCESSO||chr(0)
		into   :proc_num_pid,:cStatus
		from   adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA;

  if (sqlca.sqlcode != 0)
     {
      fprintf(fp_output,"%s - erro SELECT CTE_CONTROLA_EXECUCAO_CARGA.\n",CurrentDateTime(DataHora,1));
      sql_error(sqlca.sqlerrm.sqlerrmc);
     }    	 
				
   if (strncmp(cStatus,"ON",2)==0)
      {
	   if (StatusProcUnixPid(proc_num_pid) ==0)
	      {
           printf("Existe um processo em execucao!!!.\n");
 
           closedir(dp);
		   
           DesconectaBD();		   
	       
		   exit(0);
          }
       else
          {
           proc_num_pid = getpid(); 

           EXEC SQL 
             UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
	         SET DT_ULT_EXECUCAO = SYSDATE,
	             NU_PID          = :proc_num_pid;     
				 
           EXEC SQL COMMIT;	  
          }		  
      }	
   else
      {
	  
	   if (strncmp(cStatus,"OFF",3)==0)
          {
           proc_num_pid = getpid(); 

           printf("Processo colocado em execucao - PID: %d .\n",proc_num_pid);
		   
           EXEC SQL 
             UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
	         SET DT_ULT_EXECUCAO = SYSDATE,
			     ST_PROCESSO     = 'ON',
	             NU_PID          = :proc_num_pid;     

		   if (sqlca.sqlcode != 0)
			  {
			   sql_error(sqlca.sqlerrm.sqlerrmc);
			  }
				 
           EXEC SQL COMMIT;	  		  
		  }
	   else
	     {
           printf("Status do processo em execucao nÃ£o foi identificado - !!!.\n");
	       exit(1);		 
		 }
	  }
  
  while((p = readdir(dp)) != NULL)
    {
	  
   if((strncmp(p->d_name,"CTE_",4)==0)||(strncmp(p->d_name,"cte_",04)==0) )
     {
      sprintf(input_file_name,"%s/%s", in_file_dir, p->d_name);
      sprintf(proc_input_file_name,"%s/PROCESSADO/%s", base_file_dir, p->d_name);
      sprintf(erro_input_file_name,"%s/PROBLEMA/%s", base_file_dir, p->d_name);
	  
      sprintf(vNomeArquivo,"%s",p->d_name);
	  
      /* Procura arquivo na tabela */
      EXEC SQL 	 
	 SELECT COUNT(*) 
	 INTO   :nPesquisaArquivo
        FROM  adm_objetos.CTE_ARQUIVO_DIGITAL
        WHERE  NM_ARQUIVO = :vNomeArquivo;
     
      if (sqlca.sqlcode != 0)
         {
       	  sql_error(sqlca.sqlerrm.sqlerrmc);
         }

      if (nPesquisaArquivo > 0) 
         {
          Move_Files_Erro();
          fprintf(fp_output,"%s - Arquivo duplicado : %s.\n",CurrentDateTime(DataHora,1),p->d_name);
          fprintf(fp_output,"%s - Arquivo movido p/ diretorio erro : %s.\n",CurrentDateTime(DataHora,1),p->d_name);
         }
	  else
	     {
          fprintf(fp_output,"=============================================================================================\n");
          fprintf(fp_output,"Abrindo arquivo de entrada : %s.\n", input_file_name);
          if ((fp_input=fopen(input_file_name,"r")) == NULL)
             {
              fprintf(fp_output,"Erro na abertura do arquivo de entrada %s.\n",input_file_name);
              fprintf(fp_output,"errno = %d .\n",errno);
	     
              Move_Files_Erro();
			  		  					
			  EXEC SQL 
				 UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
				 SET ST_PROCESSO = 'OFF';     
					 
			  EXEC SQL COMMIT;	
							
              DesconectaBD();
              
              exit(1);
             }
         else 
             {
			  
	          fprintf(fp_output,"%s - Processando arquivo : %s.\n",CurrentDateTime(DataHora,1),input_file_name);

			  GravarIdentArquivo();
			  
	          Processa_Arquivo(in_file_dir);
			  
	          Close_Input_Output_Files();  
			  
              Move_Files();
			  
              EXEC SQL COMMIT; 
		  
             }
         }
     }
    }


  closedir(dp);
    
  t_f = time(NULL); 
  t_c = t_f - t_i;
  
  EXEC SQL 
	 UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
	 SET ST_PROCESSO = 'OFF';     
		 
  EXEC SQL COMMIT;	   
  
  DesconectaBD();
  
  sprintf(cmdsolaris,"gzip %s/PROCESSADO/CTE*.txt", base_file_dir);     

  resCmd = system(cmdsolaris);  
  
  exit(0);
}
/******************************************************/
/*     Funcao Gravar Identificacao Arquivo Digital    */
/******************************************************/
void GravarIdentArquivo()
{
int  cd_versao;
char nm_arquivo[250+1]; 
char dt_inclusao[18+1]; 
char nm_usuario_inclusao[30+1];

cd_versao = 100;
strcpy(nm_arquivo,p->d_name);
strcpy(dt_inclusao,CurrentDateTime(DataHora,2));
strcpy(nm_usuario_inclusao,usuario);

  EXEC SQL 
	 Select adm_objetos.SEQ_CTE_ARQUIVO.nextval
	 Into   :nSeqCTeArquivo
	 from   dual;

  if (sqlca.sqlcode != 0)
	 {
	  fprintf(fp_output,"%s - Erro Obtendo Valor da SEQUENCE CTE_SQ_ARQUIVO.\n",CurrentDateTime(DataHora,1));
	  sql_error(sqlca.sqlerrm.sqlerrmc);
	 }		  

  EXEC SQL 
     INSERT INTO adm_objetos.CTE_ARQUIVO_DIGITAL 
			(sq_arquivo, 
			 cd_versao, 
			 nm_arquivo, 
			 dt_inclusao, 
			 nm_usuario_inclusao) 
     VALUES (:nSeqCTeArquivo,
	         :cd_versao,
			 :nm_arquivo,
			 to_date(:dt_inclusao,'yyyymmdd hh24:mi:ss'),
			 :nm_usuario_inclusao
	        );
			 
  if (sqlca.sqlcode != 0)
     {
      fprintf(fp_output,"%s - erro INSERT INTO CTE_ARQUIVO_DIGITAL.\n",CurrentDateTime(DataHora,1));
      sql_error(sqlca.sqlerrm.sqlerrmc);
     }    	 
}
/********************************************************/
/*     Funcao Tratamento Dados de Identificacao CTe     */
/********************************************************/
void ProcessarInformCteIdentificacao (char *buf_aux)
{

char cCnpjFormatado[18+1];
long int nSqIdentificacao = 0;
char cNu_cte[15];
int  Nu_cte = 0;
char Nu_serie[2];
char dt_emissao_aux[18+1];
char dt_emissao[14+1];
char hr_emissao[8+1];
char nu_chave_cte[44+1];
char st_cte[25+1];
char nu_cnpj_emitente[14+1];
char sg_uf_emitente[2+1];
char nm_razao_social_emitente[250];
int  nu_cfop;
char nu_cnpj_remetente[14+1];
char nu_ie_remetente[14+1];
char sg_uf_remetente[2+1];
char nm_razao_social_remetente[250];
char nu_cnpj_destinatario[14+1];
char sg_uf_destinatario[2+1];
char nm_razao_social_destinatario[250];
char nu_cnpj_tomador_servico[14+1];
char sg_uf_tomador_servico[2+1];
char nm_razao_social_tomador_serv[250];
char nu_cnpj_tomador_expedidor[14+1];
char sg_uf_tomador_expedidor[2+1];
char nu_cnpj_tomador_recebedor[14+1];
char sg_uf_tomador_recebedor[2+1];
double vl_total_cte	     = 0;
double vl_base_calculo   = 0;
double vl_icms_destacado = 0;
char nu_placa1[7+1];
char nu_placa2[7+1];
char nu_placa3[7+1];

  strcpy(cNu_cte,mExtractField(buf_aux,Separator,1,Field,FieldSize));

  Nu_cte = atol(mNextWord(cNu_cte,0,Word,strlen(cNu_cte)-2));
  
  strcpy(Nu_serie,mNextWord(cNu_cte,strlen(cNu_cte)-1,Word,1));
    
  strcpy(hr_emissao,mExtractField(buf_aux,Separator,4,Field,FieldSize));

  sprintf(dt_emissao_aux,"%s",mExtractField(buf_aux,Separator,2,Field,FieldSize));
   
  dt_emissao[0] = dt_emissao_aux[6];
  dt_emissao[1] = dt_emissao_aux[7];
  dt_emissao[2] = dt_emissao_aux[8];
  dt_emissao[3] = dt_emissao_aux[9];
  dt_emissao[4] = dt_emissao_aux[3];
  dt_emissao[5] = dt_emissao_aux[4];
  dt_emissao[6] = dt_emissao_aux[0];
  dt_emissao[7] = dt_emissao_aux[1];

  dt_emissao[8]  = hr_emissao[0];
  dt_emissao[9]  = hr_emissao[1];
  dt_emissao[10] = hr_emissao[3];
  dt_emissao[11] = hr_emissao[4];
  dt_emissao[12] = hr_emissao[6];
  dt_emissao[13] = hr_emissao[7];
  dt_emissao[14] = '\0';
  
  strcpy(nu_chave_cte,mExtractField(buf_aux,Separator,3,Field,FieldSize));

  strcpy(st_cte,mExtractField(buf_aux,Separator,5,Field,FieldSize));

  strcpy(cCnpjFormatado,mExtractField(buf_aux,Separator,6,Field,FieldSize));
  
  nu_cnpj_emitente[0]=cCnpjFormatado[0];
  nu_cnpj_emitente[1]=cCnpjFormatado[1];
  nu_cnpj_emitente[2]=cCnpjFormatado[3];
  nu_cnpj_emitente[3]=cCnpjFormatado[4];
  nu_cnpj_emitente[4]=cCnpjFormatado[5];
  nu_cnpj_emitente[5]=cCnpjFormatado[7];
  nu_cnpj_emitente[6]=cCnpjFormatado[8];
  nu_cnpj_emitente[7]=cCnpjFormatado[9];
  nu_cnpj_emitente[8]=cCnpjFormatado[11];
  nu_cnpj_emitente[9]=cCnpjFormatado[12];
  nu_cnpj_emitente[10]=cCnpjFormatado[13];
  nu_cnpj_emitente[11]=cCnpjFormatado[14];
  nu_cnpj_emitente[12]=cCnpjFormatado[16];
  nu_cnpj_emitente[13]=cCnpjFormatado[17];
  nu_cnpj_emitente[14]='\0';
  
  cCnpjFormatado[0]='\0';
   
  strcpy(sg_uf_emitente,mExtractField(buf_aux,Separator,7,Field,FieldSize));

  strcpy(nm_razao_social_emitente,mExtractField(buf_aux,Separator,8,Field,FieldSize));

  nu_cfop             = atol(mExtractField(buf_aux,Separator,9,Field,FieldSize));

  strcpy(cCnpjFormatado,mExtractField(buf_aux,Separator,10,Field,FieldSize));
  
  nu_cnpj_remetente[0]=cCnpjFormatado[0];
  nu_cnpj_remetente[1]=cCnpjFormatado[1];
  nu_cnpj_remetente[2]=cCnpjFormatado[3];
  nu_cnpj_remetente[3]=cCnpjFormatado[4];
  nu_cnpj_remetente[4]=cCnpjFormatado[5];
  nu_cnpj_remetente[5]=cCnpjFormatado[7];
  nu_cnpj_remetente[6]=cCnpjFormatado[8];
  nu_cnpj_remetente[7]=cCnpjFormatado[9];
  nu_cnpj_remetente[8]=cCnpjFormatado[11];
  nu_cnpj_remetente[9]=cCnpjFormatado[12];
  nu_cnpj_remetente[10]=cCnpjFormatado[13];
  nu_cnpj_remetente[11]=cCnpjFormatado[14];
  nu_cnpj_remetente[12]=cCnpjFormatado[16];
  nu_cnpj_remetente[13]=cCnpjFormatado[17];
  nu_cnpj_remetente[14]='\0';
  
  cCnpjFormatado[0]='\0';

/* nu_ie_remetente, */

  strcpy(sg_uf_remetente,mExtractField(buf_aux,Separator,11,Field,FieldSize));

  strcpy(nm_razao_social_remetente,mExtractField(buf_aux,Separator,12,Field,FieldSize));

  strcpy(cCnpjFormatado,mExtractField(buf_aux,Separator,13,Field,FieldSize));
  
  nu_cnpj_destinatario[0]=cCnpjFormatado[0];
  nu_cnpj_destinatario[1]=cCnpjFormatado[1];
  nu_cnpj_destinatario[2]=cCnpjFormatado[3];
  nu_cnpj_destinatario[3]=cCnpjFormatado[4];
  nu_cnpj_destinatario[4]=cCnpjFormatado[5];
  nu_cnpj_destinatario[5]=cCnpjFormatado[7];
  nu_cnpj_destinatario[6]=cCnpjFormatado[8];
  nu_cnpj_destinatario[7]=cCnpjFormatado[9];
  nu_cnpj_destinatario[8]=cCnpjFormatado[11];
  nu_cnpj_destinatario[9]=cCnpjFormatado[12];
  nu_cnpj_destinatario[10]=cCnpjFormatado[13];
  nu_cnpj_destinatario[11]=cCnpjFormatado[14];
  nu_cnpj_destinatario[12]=cCnpjFormatado[16];
  nu_cnpj_destinatario[13]=cCnpjFormatado[17];
  nu_cnpj_destinatario[14]='\0';
  
  cCnpjFormatado[0]='\0';

  strcpy(sg_uf_destinatario,mExtractField(buf_aux,Separator,14,Field,FieldSize));

  strcpy(nm_razao_social_destinatario,mExtractField(buf_aux,Separator,15,Field,FieldSize)); 

  strcpy(cCnpjFormatado,mExtractField(buf_aux,Separator,16,Field,FieldSize));
  
  nu_cnpj_tomador_servico[0]=cCnpjFormatado[0];
  nu_cnpj_tomador_servico[1]=cCnpjFormatado[1];
  nu_cnpj_tomador_servico[2]=cCnpjFormatado[3];
  nu_cnpj_tomador_servico[3]=cCnpjFormatado[4];
  nu_cnpj_tomador_servico[4]=cCnpjFormatado[5];
  nu_cnpj_tomador_servico[5]=cCnpjFormatado[7];
  nu_cnpj_tomador_servico[6]=cCnpjFormatado[8];
  nu_cnpj_tomador_servico[7]=cCnpjFormatado[9];
  nu_cnpj_tomador_servico[8]=cCnpjFormatado[11];
  nu_cnpj_tomador_servico[9]=cCnpjFormatado[12];
  nu_cnpj_tomador_servico[10]=cCnpjFormatado[13];
  nu_cnpj_tomador_servico[11]=cCnpjFormatado[14];
  nu_cnpj_tomador_servico[12]=cCnpjFormatado[16];
  nu_cnpj_tomador_servico[13]=cCnpjFormatado[17];
  nu_cnpj_tomador_servico[14]='\0';
  
  cCnpjFormatado[0]='\0';

  strcpy(sg_uf_tomador_servico,mExtractField(buf_aux,Separator,17,Field,FieldSize));

  strcpy(nm_razao_social_tomador_serv,mExtractField(buf_aux,Separator,18,Field,FieldSize));

  strcpy(cCnpjFormatado,mExtractField(buf_aux,Separator,19,Field,FieldSize));
  
  nu_cnpj_tomador_expedidor[0]=cCnpjFormatado[0];
  nu_cnpj_tomador_expedidor[1]=cCnpjFormatado[1];
  nu_cnpj_tomador_expedidor[2]=cCnpjFormatado[3];
  nu_cnpj_tomador_expedidor[3]=cCnpjFormatado[4];
  nu_cnpj_tomador_expedidor[4]=cCnpjFormatado[5];
  nu_cnpj_tomador_expedidor[5]=cCnpjFormatado[7];
  nu_cnpj_tomador_expedidor[6]=cCnpjFormatado[8];
  nu_cnpj_tomador_expedidor[7]=cCnpjFormatado[9];
  nu_cnpj_tomador_expedidor[8]=cCnpjFormatado[11];
  nu_cnpj_tomador_expedidor[9]=cCnpjFormatado[12];
  nu_cnpj_tomador_expedidor[10]=cCnpjFormatado[13];
  nu_cnpj_tomador_expedidor[11]=cCnpjFormatado[14];
  nu_cnpj_tomador_expedidor[12]=cCnpjFormatado[16];
  nu_cnpj_tomador_expedidor[13]=cCnpjFormatado[17];
  nu_cnpj_tomador_expedidor[14]='\0';
  
  cCnpjFormatado[0]='\0';

  strcpy(sg_uf_tomador_expedidor,mExtractField(buf_aux,Separator,20,Field,FieldSize));

  strcpy(cCnpjFormatado,mExtractField(buf_aux,Separator,21,Field,FieldSize));
  
  nu_cnpj_tomador_recebedor[0]=cCnpjFormatado[0];
  nu_cnpj_tomador_recebedor[1]=cCnpjFormatado[1];
  nu_cnpj_tomador_recebedor[2]=cCnpjFormatado[3];
  nu_cnpj_tomador_recebedor[3]=cCnpjFormatado[4];
  nu_cnpj_tomador_recebedor[4]=cCnpjFormatado[5];
  nu_cnpj_tomador_recebedor[5]=cCnpjFormatado[7];
  nu_cnpj_tomador_recebedor[6]=cCnpjFormatado[8];
  nu_cnpj_tomador_recebedor[7]=cCnpjFormatado[9];
  nu_cnpj_tomador_recebedor[8]=cCnpjFormatado[11];
  nu_cnpj_tomador_recebedor[9]=cCnpjFormatado[12];
  nu_cnpj_tomador_recebedor[10]=cCnpjFormatado[13];
  nu_cnpj_tomador_recebedor[11]=cCnpjFormatado[14];
  nu_cnpj_tomador_recebedor[12]=cCnpjFormatado[16];
  nu_cnpj_tomador_recebedor[13]=cCnpjFormatado[17];
  nu_cnpj_tomador_recebedor[14]='\0';
  
  cCnpjFormatado[0]='\0'; 

  strcpy(sg_uf_tomador_recebedor,mExtractField(buf_aux,Separator,22,Field,FieldSize));

  vl_total_cte           = atof(mExtractFieldFloat(buf_aux,Separator,23,Field,FieldSize));
  
  vl_base_calculo        = atof(mExtractFieldFloat(buf_aux,Separator,24,Field,FieldSize)); 
  
  vl_icms_destacado      = atof(mExtractFieldFloat(buf_aux,Separator,25,Field,FieldSize)); 

  strcpy(nu_placa1,mExtractField(buf_aux,Separator,26,Field,FieldSize));

  strcpy(nu_placa2,mExtractField(buf_aux,Separator,27,Field,FieldSize));

  strcpy(nu_placa3,mExtractField(buf_aux,Separator,28,Field,FieldSize));

  EXEC SQL 
     Select ADM_OBJETOS.SEQ_CTE_IDENTIFICACAO.NEXTVAL
	 Into   :nSqIdentificacao
	 From   Dual;
  
  EXEC SQL 
     INSERT INTO adm_objetos.cte_identificacao 
			   (Sq_Identificacao,
				nu_cte, 
				nu_serie, 
				dt_emissao, 
				nu_chave_cte, 
				st_cte, 
				nu_cnpj_emitente, 
				sg_uf_emitente, 
				nm_razao_social_emitente, 
				nu_cfop, 
				nu_cnpj_remetente, 
				nu_ie_remetente, 
				sg_uf_remetente, 
				nm_razao_social_remetente, 
				nu_cnpj_destinatario, 
				sg_uf_destinatario, 
				nm_razao_social_destinatario, 
				nu_cnpj_tomador_servico, 
				sg_uf_tomador_servico, 
				nm_razao_social_tomador_serv, 
				nu_cnpj_tomador_expedidor, 
				sg_uf_tomador_expedidor, 
				nu_cnpj_tomador_recebedor, 
				sg_uf_tomador_recebedor, 
				vl_total_cte, 
				vl_base_calculo, 
				vl_icms_destacado, 
				nu_placa1, 
				nu_placa2, 
				nu_placa3, 
				sq_arquivo) 
												 
		VALUES (:nSqIdentificacao,
		        :Nu_cte,
	        	:Nu_serie,
		        :dt_emissao, 
				:nu_chave_cte, 
				:st_cte, 
				:nu_cnpj_emitente, 
				:sg_uf_emitente, 
				:nm_razao_social_emitente, 
				:nu_cfop, 
				:nu_cnpj_remetente, 
				:nu_ie_remetente, 
				:sg_uf_remetente, 
				:nm_razao_social_remetente, 
				:nu_cnpj_destinatario, 
				:sg_uf_destinatario, 
				:nm_razao_social_destinatario, 
				:nu_cnpj_tomador_servico, 
				:sg_uf_tomador_servico, 
				:nm_razao_social_tomador_serv, 
				:nu_cnpj_tomador_expedidor, 
				:sg_uf_tomador_expedidor, 
				:nu_cnpj_tomador_recebedor, 
				:sg_uf_tomador_recebedor, 
				:vl_total_cte, 
				:vl_base_calculo, 
				:vl_icms_destacado, 
				:nu_placa1, 
				:nu_placa2, 
				:nu_placa3,
				:nSeqCTeArquivo											
				);
										
           if (sqlca.sqlcode != 0)
              {
               fprintf(fp_output,"%s - erro INSERT INTO cte_identificacao.\n",CurrentDateTime(DataHora,1));
		        printf("Nu_cte: %d.\n",Nu_cte);
	        	printf("Nu_serie: %s.\n",Nu_serie);
		        printf("dt_emissao: %s.\n",dt_emissao); 
				printf("nu_chave_cte: %s.\n",nu_chave_cte); 
				printf("st_cte: %s.\n",st_cte); 
				printf("nu_cnpj_emitente: %s.\n",nu_cnpj_emitente);
				printf("sg_uf_emitente: %s.\n",sg_uf_emitente); 
				printf("nm_razao_social_emitente: %s.\n",nm_razao_social_emitente); 
				printf("nu_cfop: %d.\n",nu_cfop); 
				printf("nu_cnpj_remetente: %s.\n",nu_cnpj_remetente); 
				printf("nu_ie_remetente: %s.\n",nu_ie_remetente); 
				printf("sg_uf_remetente: %s.\n",sg_uf_remetente); 
				printf("nm_razao_social_remetente: %s.\n",nm_razao_social_remetente); 
				printf("nu_cnpj_destinatario: %s.\n",nu_cnpj_destinatario); 
				printf("sg_uf_destinatario: %s.\n",sg_uf_destinatario); 
				printf("nm_razao_social_destinatario: %s.\n",nm_razao_social_destinatario); 
				printf("nu_cnpj_tomador_servico: %s.\n",nu_cnpj_tomador_servico);
				printf("sg_uf_tomador_servico: %s.\n",sg_uf_tomador_servico);
				printf("nm_razao_social_tomador_serv: %s.\n", nm_razao_social_tomador_serv);
				printf("nu_cnpj_tomador_expedidor: %s.\n",nu_cnpj_tomador_expedidor); 
				printf("sg_uf_tomador_expedidor: %s.\n",sg_uf_tomador_expedidor); 
				printf("nu_cnpj_tomador_recebedor: %s.\n",nu_cnpj_tomador_recebedor); 
				printf("sg_uf_tomador_recebedor: %s.\n",sg_uf_tomador_recebedor); 
				printf("nu_placa1: %s.\n",nu_placa1); 
				printf("nu_placa2: %s.\n",nu_placa2); 
				printf("nu_placa3: %s.\n",nu_placa3);
			   
               sql_error(sqlca.sqlerrm.sqlerrmc);
              }    
 
}
/*****************************************************************/
/*                  Carregar as linhas do arquivo                */
/*****************************************************************/
Processa_Arquivo(char *base_file_dir)
{
char   buf_aux[4096];
int    WordSize      = 0;
int    Tamanho       = 0;

FieldSize = sizeof(Field);
		  
while ((fgets(buf_aux,sizeof(buf_aux),fp_input) != 0) )
   {  
          				   
    ProcessarInformCteIdentificacao (buf_aux);
   }
   
} 
/************************************************************************/
/*                      Abre arquivo de Log                             */
/************************************************************************/
Open_Log(char *prog, char *log_dir)
{
  if(strchr(prog,'/'))
    strcpy(prog_name,strrchr(prog,'/') + 1);
  else
    strcpy(prog_name,prog);

  sprintf(log_file,"%s/%s_%s.LOG", log_dir, prog_name,CurrentDateTime(DataHora,2));    

  if((fp_output=fopen(log_file,"a+")) == NULL)
       {
         fprintf(stderr,"%s - Falha na abertura do arquivo de log: %s.\nErrno %d \n",CurrentDateTime(DataHora,1),
                      log_file, errno);
					  
         DesconectaBD();
		 exit(1);
       }
}

/**********************************************************************/
/*                 Conecta ao Banco de Dados			      */
/**********************************************************************/
ConectaBD(char *User, char *Password, char *Database)
{
  EXEC SQL BEGIN DECLARE SECTION;
    varchar dbUser       [ 40 ];
    varchar dbPassword   [ 40 ];
    varchar dbDatabase   [ 40 ];
  EXEC SQL END DECLARE SECTION;

  dbUser.len     = strlen(User);
  dbPassword.len = strlen(Password);
  dbDatabase.len = strlen(Database);

  strncpy (dbUser.arr    , User    , dbUser.len    );
  strncpy (dbPassword.arr, Password, dbPassword.len);
  strncpy (dbDatabase.arr, Database, dbDatabase.len);

  oraca.orastxtf = ORASTFERR;
  EXEC SQL CONNECT :dbUser
     IDENTIFIED BY :dbPassword
             USING :dbDatabase;

  return(0);
}

/**********************************************************************/
/*                 Desconecta ao Banco de Dados			      */
/**********************************************************************/
DesconectaBD()
{
  EXEC SQL ROLLBACK;
  EXEC SQL COMMIT WORK RELEASE;
  fprintf(fp_output,"Desconexao com o BD efetuada com sucesso.\n");

}

/**********************************************************************/
sql_error(msg)
char *msg;
{
    fprintf(fp_output,"\n%s", msg);
    sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
    oraca.orastxt.orastxtc[oraca.orastxt.orastxtl] = '\0';
    oraca.orasfnm.orasfnmc[oraca.orasfnm.orasfnml] = '\0';
    fprintf(fp_output,"\n%s\n", sqlca.sqlerrm.sqlerrmc);
    fprintf(fp_output,"in \"%s...\"\n", oraca.orastxt.orastxtc);
    fprintf(fp_output,"on line %d of %s.\n\n", 
    oraca.oraslnr, oraca.orasfnm.orasfnmc);   

    EXEC SQL ROLLBACK;

	EXEC SQL 
	  UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
	  SET ST_PROCESSO = 'OFF';     
			 
    EXEC SQL COMMIT;		
	
    DesconectaBD();
    exit(1);
}
/**************************************************************/
/*     Move arquivo processado para diretorio especifico      */
/**************************************************************/
void Move_Files()
{
  fprintf(fp_output,"Movendo arquivo %s para %s.\n", input_file_name, proc_input_file_name);
  if(rename(input_file_name,proc_input_file_name) == ERRO)
    { 
       fprintf(fp_output,"errno = %d .\n",errno);

	   EXEC SQL 
		  UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
		  SET ST_PROCESSO = 'OFF';     
				 
	   EXEC SQL COMMIT;		   
	   
       DesconectaBD();
       exit(1);
    }

}
/**************************************************************/
/*       Move arquivo c/ erro para diretorio especifico       */
/**************************************************************/
void Move_Files_Erro()
{
  fprintf(fp_output,"Movendo arquivo %s para %s.\n", input_file_name, erro_input_file_name);
  if(rename(input_file_name,erro_input_file_name) == ERRO)
    { 
       fprintf(fp_output,"errno = %d .\n",errno);
	   
	   EXEC SQL 
		  UPDATE adm_objetos.CTE_CONTROLA_EXECUCAO_CARGA
		  SET ST_PROCESSO = 'OFF';     
				 
	   EXEC SQL COMMIT;	
	   
       DesconectaBD();
       exit(1);
    }

}
/**********************************************************************/
void Close_Input_Output_Files()
{
  fclose(fp_input);

}
/************************************************************************************************/
/* Devolve a palavra (Word) substituindo caracters old por new, caso encontre na string passada */
/************************************************************************************************/
char *SubString (const char *S, char *Old, char *New,char *Word)	  
{ 
 char result[4096] = "";
 char compara[4096] = ""; 
 int i,j,h   = 0;
 int y,x,z   = 0;
 x = 0;
 for (i = 0 ; i <= strlen(S) ; i++)
     {  
	  result[x] = S[i];
	  x++;
	  compara[0]='\0';
  	  j,y = 0; 
      z = i;  
	  for (j = i ; (j <= (strlen(Old)+z)-1); j++)
		  {
		   compara[y] = S[j];
		   compara[y+1] = '\0';  
		   if (strncmp(compara,Old,strlen(Old))==0)
		  	  { 
               x--;			   
			   for (h = 0 ; h <= (strlen(New)-1) ; h++)
			  	   {
					result[x] = New[h];
				   	x++;					
				   }
               i = i + (strlen(Old)-1); 
               j = j + strlen(Old)+2; 
			  }
		   y++;
		  }
	   
	 }
 memcpy (Word,result,strlen(result)+1);
  
 Word[strlen(result)+1] = '\0';
	
 return Word;
}
/******************************************************************************/
char *mExtractField (const char *Line, char *Separator, int Ord, char *Field, int FieldSize)
{
  int N = 1, i, j;

  if (Ord < 1)
     Field[0] = 0;
  else {
     i = 0;  while (N < Ord && Line[i] != '\n' && Line[i] != '\r' && Line[i] != 0) if (Line[i++] == *Separator) N++;
     j = i;  while (Line[j] != *Separator && Line[j] != '\n' && Line[j] != '\r' && Line[j] != 0) j++;

     N = j - i;  if (N >= FieldSize) N = FieldSize - 1;
     memcpy (Field, Line + i, N);
     Field[N] = 0;
  }

  return Field;
}

/******************************************************************************/
char *mExtractFieldFloat (const char *Line, char *Separator, int Ord, char *Field, int FieldSize)
{
  int N = 1, i, j;

  if (Ord < 1)
     Field[0] = 0;
  else {
     i = 0;  
	 while (N < Ord && Line[i] != '\n' && Line[i] != '\r' && Line[i] != 0) if (Line[i++] == *Separator) N++;
     j = i;  while (Line[j] != *Separator && Line[j] != '\n' && Line[j] != '\r' && Line[j] != 0) j++;
     N = j - i;  if (N >= FieldSize) N = FieldSize - 1;
     memcpy (Field, Line + i, N);
     Field[N] = 0;
  }
  
  i = 0;
  for(i = 0; i < strlen(Field); i++)
  {
   if (Field[i] == ',')
      {
       Field[i] = '.';
      }

  } 
  
  return Field;
}
/********************************/
/* Devolve a data/hora corrente */
/********************************/
char *CurrentDateTime (char *DataHora,int formato)
{
  int  dia,mes,ano,hora,minuto,segundo;
  struct tm *local;
  time_t t;
  t= time(NULL);
  local=localtime(&t);

  dia=local->tm_mday;
  mes=local->tm_mon+1;
  ano=local->tm_year+1900;
  hora=local->tm_hour;
  minuto=local->tm_min;
  segundo=local->tm_sec;
  
  if (formato == 1) {
      sprintf(DataHora,"%02lu/%02lu/%02lu %02d:%02d:%02d",dia,mes,ano,hora,minuto,segundo);
     }
  else {
        if (formato == 2)
		   {
            sprintf(DataHora,"%04lu%02d%02d%02d%02d%02d",ano,mes,dia,hora,minuto,segundo);
		   }
	   }
  return DataHora;
}
/************************************************************************/
/*          Funcao verifica status do Pid da extracao no Unix           */
/************************************************************************/
int StatusProcUnixPid(int N)
{
int w_ind_status_seq_unix_Pid;
   
   w_ind_status_seq_unix_Pid = CmdUnix ("-0",N);  
   
   return w_ind_status_seq_unix_Pid;	
}
/************************************************************************/
/*           Funcao verifica status do PID da extracao no Unix          */
/************************************************************************/
int CmdUnix (char *tipoParm, int numPid)
{
int   verPid         = numPid; 	
char  cmd_shell_unix [15]="";
char *tipo_Parm_unix = tipoParm;
int   resCmd         = 0;

    sprintf(cmd_shell_unix,"kill %s %d",tipo_Parm_unix,verPid);
    resCmd = system(cmd_shell_unix);

    printf("cmd: %s - Resulta: %d\n",cmd_shell_unix,resCmd); 
      
    return resCmd;
    
}
/**********************************************************/
/* Devolve a palavra (Word) em S a partir da posicao Pos. */
/**********************************************************/
char *mNextWord (const char *S,int Pos, char *Word, int Tamanho) 
{

  int i, j = 0;
  char result[4096]="";

  for(i = Pos; j < Tamanho; i++)
  {
   
 	  result[j] = S[i];

	  j++;
  }
  memcpy (Word,result,strlen(result)+1);
  	  
	  
  return Word;
  
}
/**********************************************************************/
void Get_Password()
{

  char buf_aux[255];

  sprintf(input_file_name,"/sistemas/INCORPORACAO/CTE/LCK/%s", usuario);

  if((fp_input=fopen(input_file_name,"r")) == NULL)
    {
      fprintf(fp_output,"[%s] Erro na abertura do arquivo restrito de senha.\n",CurrentDateTime(DataHora,1));
      fprintf(fp_output,"[%s] errno = %d.\n", CurrentDateTime(DataHora,1),errno );
      exit(1);
    }

  fread(buf_aux, 1, sizeof(buf_aux), fp_input);

  int i, j = 0;
  for(i = 0; buf_aux[i] != '\n'; i++)
  {
          cPassword[j] = buf_aux[i];

          j++;
  }

}
