/*
	Validator v1.0.5
	(c) 2012 Yair Even Or <http://dropthebit.com>
	MIT-style license.
*/
var validator = function () { function checkField() { if (field = $(this), "hidden" != field[0].type && field.is(":hidden")) return !0; field.data("valid", !0), field.data("type", field.attr("type")), field.data("val", field[0].value.replace(/^\s+|\s+$/g, "")), data = field.data(); var a = data.val; if (alertTxt = message[field.prop("name")] || message.invalid, "select" === field[0].nodeName.toLowerCase() && (data.type = "select"), "textarea" === field[0].nodeName.toLowerCase() && (data.type = "text"), validateWords = data.validateWords || 0, lengthRange = data.validateLengthRange ? (data.validateLengthRange + "").split(",") : [1], lengthLimit = !!data.validateLength && (data.validateLength + "").split(","), minmax = data.validateMinmax ? (data.validateMinmax + "").split(",") : "", pattern = data.validatePattern, tests.sameAsPlaceholder(field) && (alertTxt = msg.form.empty, data.valid = !1), data.validateLinked) { var b = 0 == data.validateLinked.indexOf("#") ? $(data.validateLinked) : $(":input[name=" + data.validateLinked + "]"); data.valid = tests.linked(a, b.val()) } if (data.valid && (data.valid = tests.hasValue(a)) || "select" == data.type) switch (data.type) { case "email": data.valid = tests.email(a); break; case "text": data.valid = tests.text(a); break; case "tel": pattern = pattern || "phone", data.valid = tests.text(a); break; case "password": data.valid = tests.text(a); break; case "number": data.valid = tests.number(a); break; case "date": data.valid = tests.date(a); break; case "url": data.valid = tests.url(a); break; case "select": data.valid = tests.select(a); break; case "hidden": data.valid = tests.hidden(a) } return field.hasClass("optional") && !data.val && (data.valid = !0), data.valid ? unmark(field) : (mark(field, alertTxt), submit = !1), data.valid } function checkAll(a) { if (0 == a.length) return console.warn("element not found"), !1; var c = !0, d = a.find(":input").filter("[required=required], .required, .optional").not("[disabled=disabled]"); return d.each(function () { c *= checkField.apply(this) }), !!c } var message, tests, checkField, validate, mark, unmark, field, minmax, defaults, validateWords, lengthRange, lengthLimit, pattern, alertTxt, data, email_illegalChars = /[\(\)\<\>\,\;\:\\\/\"\[\]]/, email_filter = /^.+@.+\..{2,3}$/; return message = { invalid: "campo inválido", empty: "Campo requerido", min: "Campo muito curto", max: "Campo muito longo", number_min: "Número muito curto", number_max: "Número muito longo", url: "URL inválida", number: "Não é um número.", email: "E-mail inválido.", email_repeat: "E-mails não conferem.", password_repeat: "Senhas não conferem.", repeat: "Sem correpondência.", complete: "Campo não completo.", select: "Selecione uma opção" }, defaults = { alerts: !0 }, tests = { sameAsPlaceholder: function (a) { return $.fn.placeholder && void 0 !== a.attr("placeholder") && data.val == a.prop("placeholder") }, hasValue: function (a) { return !!a || (alertTxt = message.empty, !1) }, linked: function (a, b) { return b == a || (alertTxt = message[data.type + "_repeat"] || message.no_match, !1) }, email: function (a) { return !(!email_filter.test(a) || a.match(email_illegalChars)) || (alertTxt = a ? message.email : message.empty, !1) }, text: function (a) { if (validateWords) { var words = a.split(" "), wordsLength = function (a) { for (var b = words.length; b--;) if (words[b].length < a) return !1; return !0 }; return !(words.length < validateWords || !wordsLength(2)) || (alertTxt = message.complete, !1) } if (a.length < lengthRange[0]) return alertTxt = message.min, !1; if (lengthRange[1] && a.length > lengthRange[1]) return alertTxt = message.max, !1; if (lengthLimit.length) { for (var obeyLimit = !1; lengthLimit.length;) lengthLimit.pop() == a.length && (obeyLimit = !0); if (!obeyLimit) return alertTxt = message.complete, !1 } if (pattern) { var regex; switch (pattern) { case "alphanumeric": regex = /^[a-z0-9]+$/i; break; case "numeric": regex = /^[0-9]+$/i; break; case "phone": regex = /^\+?([0-9]|[-|' '])+$/i; break; default: regex = pattern } try { if (regex && !eval(regex).test(a)) return !1 } catch (a) { return console.log(a, field, "regex is invalid"), !1 } } return !0 }, number: function (a) { return isNaN(parseFloat(a)) && !isFinite(a) ? (alertTxt = message.number, !1) : a.length < lengthRange[0] ? (alertTxt = message.min, !1) : lengthRange[1] && a.length > lengthRange[1] ? (alertTxt = message.max, !1) : minmax[0] && (0 | a) < minmax[0] ? (alertTxt = message.number_min, !1) : !(minmax[1] && (0 | a) > minmax[1]) || (alertTxt = message.number_max, !1) }, date: function (a) { var b, d, c = a.split(/[-.\/]/g); if (field[0].valueAsNumber) return !0; for (d = c.length; d--;) if (isNaN(parseFloat(a)) && !isFinite(a)) return !1; try { return b = new Date(c[2], c[1] - 1, c[0]), b.getMonth() + 1 == c[1] && b.getDate() == c[0] && b } catch (a) { return console.log("date test: ", err), !1 } }, url: function (a) { function b(a) { return /^(https?:\/\/)?([\w\d\-_]+\.+[A-Za-z]{2,})+\/?/.test(a) } return !!b(a) || (console.log(a), alertTxt = a ? message.url : message.empty, !1) }, hidden: function (a) { if (a.length < lengthRange[0]) return alertTxt = message.min, !1; if (pattern) { var b; if ("alphanumeric" == pattern && (b = /^[a-z0-9]+$/i, !b.test(a))) return !1 } return !0 }, select: function (a) { return !!tests.hasValue(a) || (alertTxt = message.select, !1) } }, mark = function (a, b) { if (!b || !a || !a.length) return !1; var d, c = a.parents(".item"); c.find(".alert").remove(), defaults.alerts && (d = $("<div>").addClass("alert").text(b), c.append(d)), c.removeClass("bad"), setTimeout(function () { c.addClass("bad") }, 0) }, unmark = function (a) { return a && a.length ? void a.parents(".item").removeClass("bad").find(".alert").animate({ marginLeft: 32, opacity: 0 }, 200, function () { $(this).remove() }) : (console.warn('no "field" argument, null or DOM object not found'), !1) }, { defaults: defaults, checkField: checkField, checkAll: checkAll, mark: mark, unmark: unmark, message: message, tests: tests } }();